<%-include("../include/head.ejs", {
  title: "OnBeat - Music Guild Dashboard",
  description: "Music guild dashboard."
})%>
<%-include("./includes/nav.ejs")%>

<div class="hidden flex flex-col justify-center justify-items-center items-center content-center text-center w-full h-[80vh] overflow-hidden" id="stopped">
  <!--<img src="" id="img-error" class="w-64"/>-->
  <!--<p class="text-2xl">Nothing playing...</p>-->
  <form id="requestMusic" class="flex ml-3 mt-3 mr-3" onsubmit="submit(this, '<%=guild.id%>')">
    <input name="music" class="text-slate-900 text-center p-1 drop-shadow rounded-xl" id="music" placeholder="Search for music for <%=guild.name%>" autocomplete="off"></input>
    <!--<button type="submit" class="bg-slate-200 dark:bg-slate-600 p-1 rounded-r-xl drop-shadow"><i data-feather="search"></i></button>--->
  </form>
</div>
<div id="loading" class="flex flex-col justify-center items-center text-center w-full overflow-hidden h-[80vh]">
  <div role="status" class="flex flex-col space-y-8 animate-pulse md:space-y-0 md:space-x-8 md:flex md:items-center justify-center">
    <div class="flex justify-center items-center h-48 p-2 bg-gray-300 rounded-2xl sm:w-96 dark:bg-gray-700">
    </div>
    <div class="w-full">
      <div class="p-2 bg-gray-200 rounded-full dark:bg-gray-700 w-48 mb-4"></div>
      <div class="p-1.5 bg-gray-200 rounded-full dark:bg-gray-700 max-w-[100px]"></div>
    </div>
    <span class="sr-only">Loading...</span>
  </div>
</div>
<div id="queue" class="hidden w-full h-[80vh] overflow-hidden">
  <form id="requestMusic" class="relative top-0 flex w-full justify-center ml-3 mt-3 mr-3" onsubmit="submit(this, '<%=guild.id%>')">
    <input name="music" class="text-slate-900 text-center p-1 drop-shadow rounded-xl" id="music" placeholder="Search a music for <%=guild.name%>" autocomplete="off"></input>
  </form>
  <div id="track" class="flex flex-col items-center justify-center h-full w-full">
    <img class="rounded-2xl flex justify-center items-center text-center w-48 p-2" src="/images/favicon.ico" id="track-image"></img>
    <p class="" id="track-name">
      Null
    </p>
    <p class="text-gray-600 dark:text-gray-400" id="track-artist">
      Null
    </p>
    <p class="hidden">
      Requested by <span id="track-userRequest">Null</span>
    </p>
    <div class="player">
      <div class="text-slate-900 dark:text-slate-100">
        <!--<p id="time">
          0:00
        </p>--->
      </div>
      <div id="player-buttons" class="mt-3 flex dark:text-white text-center">
        <button onclick="pause(this, '<%=guild.id%>', '<%=req.user.id%>')" id="play">
          <i id="icon" data-feather="pause"></i>
        </button>
        <button onclick="skip(this, '<%=guild.id%>', '<%=req.user.id%>')" id="skip">
          <i data-feather="skip-forward"></i>
        </button>
      </div>
    </div>
  </div>
  <div class="fixed w-full top-0 bg-zinc-700 rounded-full h-4 dark:bg-zinc-200 ">
    <div class="bg-rose-700 dark:bg-fuchsia-400 h-4 rounded-full" id="time-progress" style="width: 60%"></div>
  </div>
</div>
<div id="toast-music" class="fixed z-[4] flex justify-center items-center top-0 m-2 bg-gray-100 text-black dark:bg-gray-700 dark:text-white text-center opacity-0 -translate-x-full transition-all duration-500 p-2">
  <p id="toast-music-text">{user} requested {music}</p>
</div>

<script>
socket.emit("create", "<%=guild.id%>");
this.playing = false;
const form = document.getElementById("requestMusic")
const search = document.getElementById("music");
form.onsubmit = (e) => {
e.preventDefault();
socket.emit("musicRequest", {
guild: "<%=guild.id%>", music: search.value, user: "<%=req.user.id%>"
})
search.value = "";
}
const toast = document.getElementById("toast-music");
const text = document.getElementById("toast-music-text");
socket.on("musicQueue", (music) => {
document.body.scrollTop = 0; // For Safari
document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
const track = music.track;
const queue = music.queue;
search.disabled = true;
text.textContent = `${music.requestedBy.tag} requested ${track.title}`;
toast.classList.remove("opacity-0")
toast.classList.remove("-translate-x-full")
setTimeout(() => {
// emoji.src = "";
toast.classList.add("opacity-0")
toast.classList.add("-translate-x-full")
}, 3000);
document.getElementById("loading").classList.remove("hidden")
document.getElementById("queue").classList.add("hidden")
document.getElementById("stopped").classList.add("hidden")
})
socket.on("error", (i) => {
text.textContent = i.message;
toast.classList.remove("opacity-0")
toast.classList.remove("-translate-x-full")
setTimeout(() => {
// emoji.src = "";
toast.classList.add("opacity-0")
toast.classList.add("-translate-x-full")
}, 3000);
})
socket.on("queueEnd", () => {
document.getElementById("loading").classList.remove("hidden")
document.getElementById("queue").classList.add("hidden")
// emoji.classList.add("hidden")
text.textContent = `Queue ends`;
toast.classList.remove("opacity-0")
toast.classList.remove("-translate-x-full")
setTimeout(() => {
toast.classList.add("opacity-0")
toast.classList.add("-translate-x-full")
}, 3000);
setTimeout(() => {
document.getElementById("stopped").classList.remove("hidden")
document.getElementById("loading").classList.add("hidden")
search.disabled = false
}, 1000)
this.playing = false;
})
socket.on("trackEnd", () => {
document.getElementById("loading").classList.remove("hidden")
this.playing = false;
})
socket.on("connect", (connected) => {
console.log(connected)
document.getElementById("loading").classList.remove("hidden")
document.getElementById("stopped").classList.add("hidden")
setTimeout(() => {

document.getElementById("loading").classList.add("hidden")
if (this.playing === true) return;
document.getElementById("stopped").classList.remove("hidden")
},
500)
//alert(connected)
});
const queue = document.getElementById("queue");
//onst search = document.getElementById("music");
const notrack = document.getElementById("stopped");
const trackEl = document.getElementById("queue");
const music = {
img: document.getElementById("track-image"),
title: document.getElementById("track-name"),
artist: document.getElementById("track-artist"),
time: document.getElementById("time"),
progress: document.getElementById("time-progress"),
user: document.getElementById("track-userRequest")
}

socket.on("currentMusic", (info) => {
  document.getElementById("loading").classList.add("hidden")
  // console.log(info)
  if (!info.queue) {
    notrack.classList.remove("hidden"); 
    trackEl.classList.add("hidden");
  }
  notrack.classList.add("hidden");
  trackEl.classList.remove("hidden");
  music.img.src = info.info.image;
  music.title.textContent = info.info.title;
  music.artist.textContent = info.info.artist;
  
 // music.time.textContent = `${info.perc.current}`;
  if(info.perc.current > 100) { 
    music.progress.style.width=`100%`; 
    } else {
    music.progress.style.width = `${info.perc.progress}%`
  }
  music.user.textContent = `${info.track.requestedBy.username}`
  /* const seenUsers = info.members.slice(0, 3)
  const avatar1 = document.getElementById("user1")
  const avatar2 = document.getElementById("user2")
  document.getElementById("connected-users").textContent = info.members.length
  avatar1.src = info.members[0].displayAvatarURL;
  if (info.members[1]) {
    avatar2.classList.remove("hidden")
    avatar2.src = info.members[1].displayAvatarURL;
  } else {
    avatar2.src = "";
    avatar2.classList.add("hidden")
  }

  const extraUsers = info.members.length - 2
  if (extraUsers > 0) {
    document.getElementById("otherusers").classList.remove("hidden")
    document.getElementById("otherusers").textContent = "+" + extraUsers;
  } else {
    document.getElementById("otherusers").classList.add("hidden")
    document.getElementById("otherusers").textContent = "+0";
  }*/

  search.disabled = false;
  this.playing = true;
})

function pause(play, guild, user) {
  //  console.log(e)
  // e.preventDefault();
  if (this.paused === false) {
    this.paused = true
  } else {
    this.paused = false
  };
  socket.emit("pauseTrack", {
    guild: guild, user: user, paused: this.paused
  });
  const pauseBtn = document.getElementById("icon")
  socket.on("trackUpdate", (update) => {
    console.log(update)
    if (update.pause === true) {
      pauseBtn.innerHTML = feather.icons["play"].toSvg()
    } else {
      pauseBtn.innerHTML = feather.icons["pause"].toSvg()
    }
  })
}
function skip(music, guild, user) {
  socket.emit("skipTrack",
    {
      guild: guild,
      user: user
    });
}
</script>
<%-include('../include/footer.ejs')%>